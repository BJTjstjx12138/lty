complex.h
#ifndef COMPLEX_H
#define COMPLEX_H
#include <iostream>
using namespace std;

class Complex
{
    public:
        Complex(double r = 0,double i = 0);
        ~Complex();

        void show();
        Complex & operator+(const Complex &c);
        Complex & operator-(const Complex &c);
        Complex & operator*(const Complex &c);
        Complex & operator/(const Complex &c);

        //friend ostream &operator << (ostream &out,Complex &c);
        friend ostream & operator << (ostream &out,const Complex &c);
        friend ofstream & operator << (ofstream &out,Complex &c);
        friend ifstream & operator >> (ifstream &in,Complex &c);
    private:
        double real;
        double imag;
};
#include "complex.cpp"
#endif
complex.cpp
#include "complex.h"
#include <stdlib.h>
#include <fstream>
using namespace std;
Complex::Complex(double r,double i):real(r),imag(i)
{
}

Complex::~Complex()
{
    //dtor
}

Complex & Complex::operator+(const Complex &c)
{
    Complex s = Complex(real+c.real,imag+c.imag);
    return s;
}
Complex & Complex::operator-(const Complex &c)
{
    Complex s = Complex(real-c.real,imag-c.imag);
    return s;
}
Complex & Complex::operator*(const Complex &c)
{
    Complex s = Complex(real*c.real-imag*c.imag,real*c.imag+imag*c.real);
    return s;
}
Complex & Complex::operator/(const Complex &c)
{
    Complex t((*this)*Complex(c.real,-c.imag)),s;
    double d = c.real * c.real - c.imag * c.imag;
    s = Complex(t.real / d,t.imag / d);
    return s;
}

ostream & operator << (ostream &out,const Complex &c)
{
    out << c.real << "+" << c.imag << "i";
    return out;
}
ofstream & operator << (ofstream &out,Complex &c)
{
    out.write((char *)&c,sizeof(Complex));
    return out;
}
ifstream & operator >> (ifstream &in,Complex &c)
{
    in.read((char *)&c,sizeof(Complex));
    return in;
}main.cpp
#include <iostream>
#include <fstream>
#include "complex.h"
using namespace std;

int main()
{
    Complex a1,a2,s1;
    ifstream in("s3.dat");
    in >> a1 >> a2;
    in.close();

    ofstream out("d3.dat");
    s1 = a1 * a2;
    out << s1;
    out.close();

    in.open("d3.dat");
    in >> s1;
    cout << s1;
    in.close();
    return 0;
}
